table AppsUsers
	lineageTag: bf5b3332-a310-47d0-bc3a-d51afad10122

	column AppName
		dataType: string
		lineageTag: ee6fd435-8319-42eb-9899-088993a3e81d
		summarizeBy: none
		sourceColumn: AppName

		annotation SummarizationSetBy = Automatic

	column AppUserAccessRight
		dataType: string
		lineageTag: f81b127f-58a9-427c-a5e7-ddb0fd4a3dad
		summarizeBy: none
		sourceColumn: AppUserAccessRight

		annotation SummarizationSetBy = Automatic

	column displayName
		dataType: string
		lineageTag: 00cb5b3f-d650-4000-b7b5-ec82cf89414f
		summarizeBy: none
		sourceColumn: displayName

		annotation SummarizationSetBy = Automatic

	column 'Email Address'
		dataType: string
		lineageTag: 25f21af2-db66-42fe-9acf-b9a93560b5ab
		summarizeBy: none
		sourceColumn: Email Address

		annotation SummarizationSetBy = Automatic

	column 'Having readergroups/not'
		dataType: int64
		formatString: 0
		lineageTag: d5cdae2b-cd1e-4e6f-88f9-458838c7ba50
		summarizeBy: none
		sourceColumn: Having readergroups/not

		changedProperty = DataType

		annotation SummarizationSetBy = User

	column AppId
		dataType: string
		lineageTag: 79905a0d-7998-400f-a652-851dc068411d
		summarizeBy: none
		sourceColumn: AppId

		annotation SummarizationSetBy = Automatic

	column workspaceId
		dataType: string
		lineageTag: 5d08664d-32a1-4b01-b825-b4b7d1d2078d
		summarizeBy: none
		sourceColumn: workspaceId

		annotation SummarizationSetBy = Automatic

	partition AppsUsers-11fe5793-d9a7-43bb-bd18-6a8f9f3f5497 = m
		mode: import
		source =
				let
				    Source = PowerPlatform.Dataflows(null),
				    Workspaces = Source{[Id="Workspaces"]}[Data],
				    #"6c3250c1-cd1a-4bb8-acb7-0518bc2c8151" = Workspaces{[workspaceId="6c3250c1-cd1a-4bb8-acb7-0518bc2c8151"]}[Data],
				    #"e9e9ea33-99d3-4f97-9fd9-7c0e43f4c844" = #"6c3250c1-cd1a-4bb8-acb7-0518bc2c8151"{[dataflowId="e9e9ea33-99d3-4f97-9fd9-7c0e43f4c844"]}[Data],
				    AppsUsers_ = #"e9e9ea33-99d3-4f97-9fd9-7c0e43f4c844"{[entity="AppsUsers",version=""]}[Data],
				    #"Removed Columns" = Table.RemoveColumns(AppsUsers_,{"graphId", "principalType", "userType", "identifier"}),
				    #"Merged Queries" = Table.NestedJoin(#"Removed Columns", {"displayName"}, SecurityGroups, {"principalgroupname"}, "SecurityGroups", JoinKind.LeftOuter),
				    #"Expanded SecurityGroups" = Table.ExpandTableColumn(#"Merged Queries", "SecurityGroups", {"userprincipalname"}, {"userprincipalname"}),
				    #"Merged Columns" = Table.CombineColumns(#"Expanded SecurityGroups",{"emailAddress", "userprincipalname"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"Email Address"),
				    #"Appended Query" = Table.Combine({#"Merged Columns", #"AppsUsers from Nested SecurityGroups", #"NestedGroups Not Mapping"}),
				    #"Added Conditional Column" = Table.AddColumn(#"Appended Query", "Custom", each if Text.Contains([displayName], "(Auto)") then 0 else if Text.Contains([displayName], "ALL") then 0 else if Text.Contains([displayName], "Reader") then 1 else if Text.Contains([displayName], "Viewer") then 1 else 0),
				    #"Renamed Columns" = Table.RenameColumns(#"Added Conditional Column",{{"Custom", "Having readergroups/not"}}),
				    #"Merged Queries1" = Table.NestedJoin(#"Renamed Columns", {"AppId"}, Apps, {"AppId"}, "Apps", JoinKind.LeftOuter),
				    #"Expanded Apps" = Table.ExpandTableColumn(#"Merged Queries1", "Apps", {"workspaceId"}, {"workspaceId"})
				in
				    #"Expanded Apps"

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

